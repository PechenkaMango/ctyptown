import logging
import os
from aiogram import Bot, Dispatcher, executor, types

import markups as nav
from db import BotDB

BotDB = BotDB('users.db')


logging.basicConfig(level=logging.INFO)

BOT_TOKEN = '5376266478:AAEPayJ2gwxFbkT8hxqk5ufaKEdLNVC42Mg'
bot = Bot(token=BOT_TOKEN)
APP_URL = 'https://ctyptown.herokuapp.com/' + BOT_TOKEN
dp = Dispatcher(bot)

admin = [491603763, 999374204, 2066551161]
b = ['1', '11', '13', '20', '30', '32', '34', '35', '36', '37', '42', '44', '46', '49', '51', '56', '58', '59', '60', '70', '73', '76', '78', '84', '86', '90', '95', '96', '98', '100']

def avaliable():
    file_names = os.listdir('avaliable')
    return sorted([int(i.replace('.png', '')) for i in file_names])

def count_nft(user_id):
    mynft = BotDB.get_nft(user_id)
    if mynft:
        return mynft.split(',')
    else:
        return 0

"""–°—Ç—Ä–∞—Ç –±–æ—Ç–∞"""
@dp.message_handler(commands=['start', 'help', 'menu'])
async def start(message: types.Message):
    if not BotDB.user_exists(message.from_user.id):
        BotDB.add_user(message.from_user.id)
    BotDB.new_menu(message.from_user.id, 0)

    if admin.count(message.from_user.id) != 0:
        await bot.send_message(message.from_user.id,
                               text=f'Admin {message.from_user.id}', reply_markup=nav.Statistic)
    else:
        await bot.send_message(message.from_user.id, text='–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –Ω–∞—à–∏ NFT, –ø–æ—Ç–æ—Ä–æ–ø–∏—Å—å –≤—Å–µ–≥–æ 100 –∂–∏—Ç–µ–ª–µ–π –ø–æ 5üíé\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=nav.mainMenu)


"""–ü–æ–∫—É–ø–∫–∞ NFT"""
@dp.callback_query_handler(text='buyNFT')
async def buyNFT(message: types.Message):

    BotDB.new_menu(message.from_user.id, 1)

    BotDB.update()


    if BotDB.get_tonkeepr(message.from_user.id):
        buy = BotDB.get_buy(message.from_user.id)
        if buy:
            text=f'üë®‚Äçüé§ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∏—Ç–µ–ª—è –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {buy}. \nüíé –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 5 TON –Ω–∞ Tonkeeper –∫–æ—à–µ–ª—ë–∫ \n\n`EQDa7GX9FcBnG1kq3VLyfO6TQrR5WDw9PlkbK43JVYEuuLti` \n\n‚ùóÔ∏è–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É `{message.from_user.id}`'
            if BotDB.get_proverka(message.from_user.id):
                BotDB.new_menu(message.from_user.id, 6)
                await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, text=text, parse_mode="Markdown", reply_markup=nav.backMenu)
            else:
                await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, text=text, parse_mode="Markdown", reply_markup=nav.buyMenu)
        else:
            if avaliable():
                await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, text=f'üí≥ –î–ª—è –ø–æ–∫—É–ø–∫–∏, –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –ª—é–±–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä.\nüëÄ–ù–∞–ø–æ–º–∏–Ω–∞—é, –≤ —ç—Ç–∏—Ö –Ω–æ–º–µ—Ä–∞—Ö —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –∂–∏—Ç–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ USUAL/RESIDENT\n\nüëª–°–≤–æ–±–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n{str(avaliable())[1:-1]}', reply_markup=nav.backMenu)
            else:
                await bot.send_message(chat_id=message.message.chat.id, text=f'–í—Å–µ NFT –∫—É–ø–ª–µ–Ω—ã', reply_markup=nav.backMenu)

    else:
        BotDB.new_menu(message.from_user.id, 11)
        await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Tonkeepr –∫–æ—à–µ–ª–µ–∫. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Ç–æ–º, –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞–º –≤–∞—à–∏ NFT', reply_markup=nav.backMenu)

    await message.answer()


@dp.callback_query_handler(text='myNFT')
async def myNFT(message: types.Message):
    BotDB.new_menu(message.from_user.id, 2)
    mynft = count_nft(message.from_user.id)
    if mynft != 0:
        media = []
        for i in mynft:
            if i:
                media.append(types.InputMediaPhoto(open(f'inaccessible/{i}.png', 'rb')))

        await bot.send_message(chat_id=message.message.chat.id, text="üïëÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞...")

        for i in range(0, len(media), 10):
            await bot.send_media_group(message.from_user.id, media=media[i:i + 10])

        c = []
        for i in mynft:
            for j in b:
                if i == j:
                    c.append(i)
                    break

        await bot.send_message(chat_id=message.message.chat.id, text=f'üßëüèΩ‚Äçüé§ –¢–≤–æ–∏ –∂–∏—Ç–µ–ª–∏ \nUSUAL - {len(mynft)-len(c)}\nRESIDENT - {len(c)}', reply_markup=nav.backMenu)

    else:
        await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                    text='–¢—ã –µ—â–µ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª —Å–≤–æ–µ–≥–æ –∂–∏—Ç–µ–ª—è üßë', reply_markup=nav.backMenu)
    await message.answer()


@dp.callback_query_handler(text='oProject')
async def oProject(message: types.Message):
    BotDB.new_menu(message.from_user.id, 3)
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id, text='–û –ø—Ä–æ–µ–∫—Ç–µ:\nüèõ–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º ¬´–ö—Ä–∏–ø—Ç–∞—É–Ω¬ª, –º–µ—Ç–∞–ø–æ–ª–∏—Å —Å–≤–æ–±–æ–¥—ã –∏ –≥–∞—Ä–º–æ–Ω–∏–∏, —Å–æ —Å–≤–æ–∏–º–∏ NFT-–∂–∏—Ç–µ–ª—è–º–∏ –æ–ª–∏—Ü–µ—Ç–≤–æ—Ä—è—é—â–∏–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\nüíé–ù–∞—à–∞ NFT-–∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–æ—Ä –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π, –∞ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ –±—É–¥—É—â–µ–≥–æ (–∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è: DAO, —Å—Ç–µ–π–∫–∏–Ω–≥, NFT-–∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤, P2E –∏–≥—Ä—É).\nüíô–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∞–º–∏, –≤–µ–¥—å –∑–∞ –Ω–∞–º–∏ –±—É–¥—É—â–µ–µ!', reply_markup=nav.backMenu)
    await message.answer()
@dp.callback_query_handler(text='oNas')
async def oNas(message: types.Message):
    BotDB.new_menu(message.from_user.id, 4)
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                                text='ü¶∏üèº–ö–æ–º–∞–Ω–¥–∞ ¬´Cryptown¬ª —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö —á–µ–ª–æ–≤–µ–∫:\n–•—É–¥–æ–∂–Ω–∏–∫ ‚Äì –ï–≥–æ—Ä (@fridins).\n–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äì –ò–ª—å—è (@Mer3avchik).\n–ò–¥–µ–π–Ω—ã–π –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å ‚Äì –ö–∏—Ä–∏–ª–ª (@kireeshk).\n–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç - –í–æ–≤–∞ (@mango_cs).\n\nüî•–ö–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å –±—É–¥–µ—Ç —Ä–∞–¥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!', reply_markup=nav.backMenu)
    await message.answer()


@dp.callback_query_handler(text='profile')
async def profile(message: types.Message):
    BotDB.new_menu(message.from_user.id, 5)
    tonkeepr = BotDB.get_tonkeepr(message.from_user.id)
    if not tonkeepr:
        tonkeepr = '–ù–µ —É–∫–∞–∑–∞–Ω'
    if not count_nft(message.from_user.id):
        count = 0
    else:
        count = len(count_nft(message.from_user.id))
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                                text=f'<strong>ID:</strong> <code>{message.from_user.id}</code>\n<strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ç–µ–ª–µ–π: {count}</strong>\n<strong>Tonkeepr:</strong> <code>{tonkeepr}</code>',
                                parse_mode='HTML',
                                reply_markup=nav.backMenu)
    await message.answer()


@dp.callback_query_handler(text='back')
async def back_menu(message: types.Message):
    if BotDB.get_menu(message.from_user.id) in [2, 1, 6]:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)
        await bot.send_message(chat_id=message.from_user.id, text='–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –Ω–∞—à–∏ NFT, –ø–æ—Ç–æ—Ä–æ–ø–∏—Å—å –≤—Å–µ–≥–æ 100 –∂–∏—Ç–µ–ª–µ–π –ø–æ 5üíé\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=nav.mainMenu)
    else:
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id, text='–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –Ω–∞—à–∏ NFT, –ø–æ—Ç–æ—Ä–æ–ø–∏—Å—å –≤—Å–µ–≥–æ 100 –∂–∏—Ç–µ–ª–µ–π –ø–æ 5üíé\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=nav.mainMenu)
    BotDB.new_menu(message.from_user.id, 0)
    await message.answer()





""" –û–ë–†–ê–Æ–û–¢–ö–ê –ü–û–ö–£–ü–ö–ò """
@dp.callback_query_handler(text='prover')
async def prover(message: types.Message):
    BotDB.add_proverka(message.from_user.id)

    await bot.edit_message_reply_markup(chat_id=message.from_user.id, message_id=message.message.message_id, reply_markup=nav.backMenu)

    await bot.send_message(chat_id=message.from_user.id, text='üïëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    await bot.send_message(chat_id='491603763', text=f'{message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã (–∂–∏—Ç–µ–ª—å ‚Ññ {BotDB.get_buy(message.from_user.id)})', reply_markup=nav.ChackPay)
    await bot.send_message(chat_id='999374204', text=f'{message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã (–∂–∏—Ç–µ–ª—å ‚Ññ {BotDB.get_buy(message.from_user.id)})', reply_markup=nav.ChackPay)
    await message.answer()

@dp.callback_query_handler(text='otmena')
async def otmena(message: types.Message):
    num = BotDB.get_buy(message.from_user.id)
    if num:
        os.replace(f'inaccessible/{num}.png', f'avaliable/{num}.png')
        BotDB.del_buy(message.from_user.id)
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)
        await bot.send_message(chat_id=message.from_user.id, text='–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –Ω–∞—à–∏ NFT, –ø–æ—Ç–æ—Ä–æ–ø–∏—Å—å –≤—Å–µ–≥–æ 100 –∂–∏—Ç–µ–ª–µ–π –ø–æ 5üíé\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=nav.mainMenu)
    else:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)
        await bot.send_message(chat_id=message.from_user.id, text='–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –Ω–∞—à–∏ NFT, –ø–æ—Ç–æ—Ä–æ–ø–∏—Å—å –≤—Å–µ–≥–æ 100 –∂–∏—Ç–µ–ª–µ–π –ø–æ 5üíé\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=nav.mainMenu)
    await message.answer()


"""ADMIN"""
@dp.callback_query_handler(text='yes')
async def yes(message: types.Message):
    user_id = message.message.text.split(' ')[0]
    nft = BotDB.get_buy(user_id)
    BotDB.add_nft(user_id, nft)

    await bot.send_message(chat_id=user_id, text=f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
    BotDB.del_buy(user_id)
    BotDB.del_proverka(user_id)
    await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                text=f'{message.message.text}\n‚úÖ –û–ø–ª–∞—Ç–∏–ª')
    await message.answer()

@dp.callback_query_handler(text='no')
async def no(message: types.Message):
    user_id = message.message.text.split(' ')[0]
    BotDB.del_proverka(user_id)
    await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, text=f'{message.message.text}\n‚ùå –ù–µ –æ–ø–ª–∞—Ç–∏–ª')

    await bot.send_message(chat_id=user_id, text=f'‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')

    await message.answer()




@dp.message_handler(content_types=['text'])
async def get_text_messages(message: types.Message):
    msg = BotDB.get_menu(message.from_user.id)
    error_msg = ''
    if msg == 1 and not BotDB.get_buy(message.from_user.id):
        try:
            if 1 <= int(message.text) <= 100:
                if int(message.text) in avaliable():
                    BotDB.add_buy(message.from_user.id, int(message.text))
                    await bot.send_message(chat_id=message.chat.id, text=f'üë®‚Äçüé§ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∏—Ç–µ–ª—è –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {message.text}. \nüíé –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 5 TON –Ω–∞ Tonkeeper –∫–æ—à–µ–ª—ë–∫ \n\n`EQDa7GX9FcBnG1kq3VLyfO6TQrR5WDw9PlkbK43JVYEuuLti` \n\n‚ùóÔ∏è–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É `{message.from_user.id}`', parse_mode="Markdown", reply_markup=nav.buyMenu)
                else:
                    error_msg = f'‚ùóÔ∏è–ñ–∏—Ç–µ–ª—è –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {message.text} —É–∂–µ –∫—É–ø–∏–ª–∏'
            else:
                error_msg = f'‚ùóÔ∏è–ñ–∏—Ç–µ–ª—è –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {message.text} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        except:
            error_msg = f'‚ùóÔ∏è"{message.text}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º'
            if error_msg:
                await bot.send_message(chat_id=message.chat.id, text=f'{error_msg}\n\nüí≥ –î–ª—è –ø–æ–∫—É–ø–∫–∏, –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –ª—é–±–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä.\nüëÄ–ù–∞–ø–æ–º–∏–Ω–∞—é, –≤ —ç—Ç–∏—Ö –Ω–æ–º–µ—Ä–∞—Ö —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –∂–∏—Ç–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ USUAL/RESIDENT\n\nüëª–°–≤–æ–±–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n{str(avaliable())[1:-1]}', parse_mode="Markdown", reply_markup=nav.backMenu)
    elif msg == 11:
        BotDB.add_tonkeepr(message.from_user.id, message.text)
        await bot.send_message(chat_id=message.chat.id, text='‚úÖ –ö–æ—à–µ–ª–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        BotDB.new_menu(message.from_user.id, 1)
        if avaliable():
            await bot.send_message(chat_id=message.chat.id,
                                   text=f'üí≥ –î–ª—è –ø–æ–∫—É–ø–∫–∏, –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –ª—é–±–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä.\nüëÄ–ù–∞–ø–æ–º–∏–Ω–∞—é, –≤ —ç—Ç–∏—Ö –Ω–æ–º–µ—Ä–∞—Ö —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –∂–∏—Ç–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ USUAL/RESIDENT\n\nüëª–°–≤–æ–±–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n{str(avaliable())[1:-1]}',
                                   reply_markup=nav.backMenu)
        else:
            await bot.send_message(chat_id=message.message.chat.id,
                                   text=f'–í—Å–µ NFT –∫—É–ø–ª–µ–Ω—ã',
                                   reply_markup=nav.backMenu)
    else:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)











@dp.callback_query_handler(text='avaliable')
async def no(message: types.Message):
    admin_avaliable = BotDB.admin_avaliable()
    admin_delayed_nft = BotDB.admin_delayed_nft()
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                                text=f'‚úÖ –ö—É–ø–ª–µ–Ω–Ω—ã–µ NFT ({len(admin_avaliable)}):\n{str(admin_avaliable)[1:-1]}\n\nüïë –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ NFT ({len(admin_delayed_nft)}):\n{str(admin_delayed_nft)[1:-1]}\n\nüñº –ù–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ NFT ({len(avaliable())}):\n{str(avaliable())[1:-1]}', reply_markup=nav.backAdmin)
    await message.answer()
@dp.callback_query_handler(text='people')
async def no(message: types.Message):
    all_people = BotDB.all_people()
    active_people = BotDB.active_people()
    not_active_people = BotDB.not_active_people()
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                                text=f'üèò –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {all_people}\n\nüè° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å NFT: {active_people} ({round(active_people*100/all_people)}%)\n\nüèö –ë–µ–∑ Tonkeepr (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ): {not_active_people} ({round(not_active_people*100/BotDB.all_people())}%)',
                                reply_markup=nav.backAdmin)
    await message.answer()
@dp.callback_query_handler(text='allstatistic')
async def no(message: types.Message):
    all = BotDB.all_statistic()
    text = ''.join([f"<strong>ID:</strong> <code>{i[0]}</code>\n<strong>Tonkeepr:</strong> <code>{i[1]}</code>\n<strong>NFT: {i[2]}</strong>\n\n" for i in all])
    if text:
        text = f'üßë‚Äçüíª –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏\n\n{text}'
    else:
        text = 'üòî –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –Ω–µ—Ç—É'
    try:
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                                    text=text, parse_mode="HTML",
                                    reply_markup=nav.backAdmin)
    except:
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                                    text=f'–û—à–∏–±–∫–∞! –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç\n–ù–∞ –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ)',
                                    reply_markup=nav.backAdmin)

    await message.answer()
@dp.callback_query_handler(text='backAdmin')
async def no(message: types.Message):
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                                text=f'Admin {message.from_user.first_name}', reply_markup=nav.Statistic)
    await message.answer()






if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

